##Michelle Ovando
## This is my makeChacheMatrix

source("/cloud/project/Michelle.R")
makeCacheMatrix <- function(x = matrix()) {
        inv <- NULL
        set <- function(y) {
                x <<- y
                inv <<- NULL
        }
        get <- function() x
        setInverse <- function(inverse) inv <<- inverse
        getInverse <- function() inv
        list(set = set,
             get = get,
             setInverse = setInverse,
             getInverse = getInverse)
## im computing the inverse of my matrix
##             
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        inv <- x$getInverse()
        if (!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        mat <- x$get()
        inv <- solve(mat, ...)
        x$setInverse(inv)
        inv
}

##im testing my solution

}source("/cloud/project/Michelle.R")
> x<-makeCacheMatrix(matrix(1:4,nrow =2,ncol =2)
+ 
+ 
+ 
+ 
> x <-makeCacheMatrix(matrix(1:4,nrow =2,ncol =2))
> x<-makeCacheMatrix(matrix(1:4,nrow =2,ncol =2))
> x
$set
function(y) {
    x <<- y
    inv <<- NULL
  }
<environment: 0x56069d30e278>

$get
function() x
<environment: 0x56069d30e278>

$setInverse
function(inverse) inv <<- inverse
<environment: 0x56069d30e278>

$getInverse
function() inv
<environment: 0x56069d30e278>

> x$get()
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> source("/cloud/project/Michelle.R")
> cacheSolve(x)
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
